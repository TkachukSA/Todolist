{"version":3,"sources":["serviceWorker.ts","AddImportForm.tsx","EdiTableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","label","helperText","variant","value","onChange","e","currentTarget","onKeyPress","key","className","IconButton","onClick","AddBox","Button","color","size","EdiTableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","Task","task","changeTaskstatus","removeTask","changeTaskTitle","todolisdId","RemoveTask","useCallback","id","cangeTaskstatus","checked","changeTasktitle","newValue","isDone","Checkbox","Delete","Todolist","tasks","filter","_removeTodolist","_addTask","changeFilter","_changeTodolistTitle","tasksForTodolist","map","t","addTask","removeTodolist","changeTodolistTitle","OnAllClickHander","OnActiveClickHander","OnComplatedClickHander","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","taskID","todolistID","action","type","taskId","todolistId","addTaskAC","changeTaskStatusAC","changeTaskTitleStatusAC","newFilterValue","AddTodolist","v1","AddTodolistAS","ChangeTodolistTitleAS","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","allTodolistTasks","item","Paper","rootReducer","combineReducers","copyState","newTask","NewTodolist","todolist","find","todolist1","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3398ad4d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype AddItemFormType={\n    addItem: (title:string)=> void\n}\nconst AddItemForm=React.memo((props: AddItemFormType)=>{\n    console.log('AddItemForm')\n    const [title, setTitle] = useState<string>(\" \")\n    const [error, setError] = useState<string | null>(null)\n\n    const OnKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") addItem()\n    }\n    const OnTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if(error !== null){\n            setError(null)\n        }\n        setTitle(e.currentTarget.value)\n    }\n    const addItem = () => {\n        const trimmedTitle = title.trim()\n        if (trimmedTitle !== \"\") {\n            props.addItem(trimmedTitle)\n\n        } else {\n            setError('Title is required!')\n        }\n        setTitle(\"\")\n    }\nreturn (\n    <div>\n\n\n<TextField\n    label={\"Title\"}\n    helperText={error}\n    error={!!error}\n    variant={\"outlined\"}\n    value={title}\n    onChange={OnTitleChangeHandler}\n    onKeyPress={OnKeyPressAddItem}\n    className={error ? \"error\" : \"\"}/>\n\n\n<IconButton onClick={addItem}>\n    <AddBox/>\n</IconButton>\n        <Button onClick={addItem} variant=\"contained\" color=\"inherit\" size=\"small\">x</Button>\n    {/* //   {error && <div className={\"error-message\"}>{error}</div>}*/}\n    </div>)\n})\nexport default AddItemForm","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EdiTableSpanType={\n    title: string\n    changeValue: (newValue: string)=> void\n}\nfunction EdiTableSpan(props: EdiTableSpanType){\n    console.log(\"edit tabel span\")\n    const [editMode, setEditMode]=useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const activatedEditMode = ()=>{setEditMode(true)}\n    const deActivatedEditMode = ()=>{setEditMode(false); props.changeValue(title)}\n    const onChangeTitle= (e: ChangeEvent<HTMLInputElement>)=>{setTitle(e.currentTarget.value)}\n\n    return (\n        editMode\n/*\n            ? <input onBlur={deActivatedEditMode} autoFocus={true} value={title} onChange={onChangeTitle}/>\n*/\n            ?<TextField onBlur={deActivatedEditMode} autoFocus={true} value={title} onChange={onChangeTitle} variant={\"outlined\"}/>\n            : <span onDoubleClick={activatedEditMode}>{props.title}</span>\n\n    )\n}\n\n\nexport default EdiTableSpan","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport EdiTableSpan from \"./EdiTableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskType} from \"./Todolist\";\n\ntype TaskPropsType = {\n    task: TaskType\n    changeTaskstatus: (taskID: string, isDone: boolean, todolistID: string) => void\n    removeTask: (askID: string, todolistID: string) => void\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\n\n    todolisdId: string\n\n}\nexport const Task: React.FC<TaskPropsType> = React.memo(({\n                                                             task,\n                                                             changeTaskstatus,\n                                                             removeTask,\n                                                             changeTaskTitle,\n                                                             todolisdId,\n                                                         }) => {\n    const RemoveTask = useCallback(() => {removeTask(task.id, todolisdId)},[removeTask,task.id, todolisdId])\n    const cangeTaskstatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {changeTaskstatus(task.id, e.currentTarget.checked, todolisdId)},[changeTaskstatus,task.id,todolisdId])\n    const changeTasktitle = useCallback((newValue: string) => {changeTaskTitle(task.id, newValue, todolisdId)},[changeTaskTitle,task.id,todolisdId])\n\n\n    return <div className={task.isDone ? \"is-done\" : \"\"} key={task.id}>\n        <Checkbox color={\"secondary\"}\n                  onChange={cangeTaskstatus}\n                  checked={task.isDone}/>\n        <EdiTableSpan title={task.title} changeValue={changeTasktitle}/>\n        <IconButton onClick={RemoveTask}>\n            <Delete/>\n        </IconButton>\n\n    </div>\n})","import React, {useCallback} from 'react';\r\nimport AddItemForm from \"./AddImportForm\";\r\nimport EdiTableSpan from \"./EdiTableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {FilterValuesType} from \"./AppWithRedux\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    _removeTodolist: (todolistID: string) => void\r\n    _addTask: (title: string, todolistID: string) => void\r\n    removeTask: (askID: string, todolistID: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, todolistID: string) => void\r\n    changeTaskstatus: (taskID: string, isDone: boolean, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n    _changeTodolistTitle: (title: string, todolistID: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<PropsType>=React.memo(({\r\n                                                           id,\r\n                                                           title,\r\n                                                           tasks,\r\n                                                           filter,\r\n                                                           _removeTodolist,\r\n                                                           _addTask,\r\n                                                           removeTask,\r\n                                                           changeFilter,\r\n                                                           changeTaskstatus,\r\n                                                           changeTaskTitle,\r\n                                                           _changeTodolistTitle,\r\n\r\n\r\n                                                       }) =>{\r\n    console.log('todolist')\r\n\r\n\r\n\r\n    let tasksForTodolist= tasks\r\n\r\n    if (filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(task => task.isDone === false)\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(task => task.isDone === true)\r\n    }\r\n\r\n    const task = tasksForTodolist.map((t) => <Task\r\n                                                      removeTask={removeTask}\r\n                                                      changeTaskTitle={changeTaskTitle}\r\n                                                      changeTaskstatus={changeTaskstatus}\r\n                                                      task={t}\r\n                                                      todolisdId={id}\r\n                                                      key={t.id}\r\n    />)\r\n\r\n\r\n    const addTask = useCallback((title: string) => {_addTask(title, id)},[_addTask,id])\r\n    const removeTodolist = useCallback(() => {_removeTodolist(id)},[_removeTodolist, id])\r\n    const changeTodolistTitle = useCallback((title: string) => {_changeTodolistTitle(title, id)},[_changeTodolistTitle, id])\r\n\r\n    const OnAllClickHander = useCallback(() => {changeFilter(\"all\", id)},[])\r\n    const OnActiveClickHander = useCallback(() => {changeFilter(\"active\", id)},[])\r\n\r\n    const OnComplatedClickHander = useCallback(() => {changeFilter(\"completed\", id)},[])\r\n\r\n\r\n\r\n\r\n\r\n    return <div>\r\n\r\n\r\n        <h3>\r\n            <EdiTableSpan title={title} changeValue={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n\r\n\r\n        <AddItemForm addItem={addTask}/>\r\n\r\n        <div>\r\n            {task}\r\n        </div>\r\n        <div>\r\n\r\n            <Button\r\n                color=\"primary\"\r\n                variant={filter === \"all\" ? \"outlined\" : \"text\"}\r\n                size=\"small\"\r\n                onClick={OnAllClickHander}>all\r\n            </Button>\r\n              <Button\r\n                color=\"primary\"\r\n                variant={filter === \"active\" ? \"outlined\" : \"text\"}\r\n                size=\"small\"\r\n                onClick={OnActiveClickHander}>Active\r\n              </Button>\r\n            <Button\r\n                color=\"primary\"\r\n                variant={filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                size=\"small\"\r\n                onClick={OnComplatedClickHander}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","\nimport {v1} from \"uuid\";\nimport {FilterValuesType, toDoListType} from \"../AppWithRedux\";\n\n\n\nexport type RemoveTodolistActionType ={\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\nexport type AddTodolistActionType ={\n    type: 'ADD-TODOLIST'\n    title: string\n    todolistId: string\n}\nexport type ChangeTodolistTitleActionType ={\n    type: 'CHANGE-TODOLIST-TITLE'\n    title: string\n    id: string\n}\nexport type ChangeTodolistFilterActionType ={\n    type: 'CHANGE-TODOLIST-FILTER'\n    filter: FilterValuesType\n    id: string\n}\n\ntype ActionsType = ChangeTodolistFilterActionType | ChangeTodolistTitleActionType | AddTodolistActionType |RemoveTodolistActionType\n\n\nlet initialState:toDoListType[] =[]\nexport const TodolistsReducer = (state: Array<toDoListType> = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter(tl => tl.id !== action.id)\n\n        case \"ADD-TODOLIST\":\n            const NewTodolist: toDoListType = {\n                title: action.title,\n                id: action.todolistId,\n                filter: \"all\"\n            }\n            return [...state, NewTodolist]\n\n        case 'CHANGE-TODOLIST-TITLE':\n            const todolist = state.find(t => t.id === action.id)\n            if (todolist) {\n                todolist.title = action.title\n               return [...state]\n            }\n            return state\n\n        case 'CHANGE-TODOLIST-FILTER':\n            const todolist1 = state.find(t => t.id === action.id)\n            if (todolist1) {\n                todolist1.filter = action.filter\n                return [...state]\n            }\n            return state\n\n        default:\n            return state\n\n    }\n}\nexport const RemoveTodolistAS=(todolistId: string):RemoveTodolistActionType=>({type: \"REMOVE-TODOLIST\", id: todolistId})\nexport const AddTodolistAS=(title: string):AddTodolistActionType=>({type: \"ADD-TODOLIST\", title: title, todolistId: v1()})\nexport const ChangeTodolistTitleAS=(title: string, id: string):ChangeTodolistTitleActionType=>({ type: \"CHANGE-TODOLIST-TITLE\", title: title, id:id})\nexport const ChangeTodolistFilterAS = (filter:FilterValuesType, id:string):ChangeTodolistFilterActionType=>({ type: \"CHANGE-TODOLIST-FILTER\", filter: filter, id: id})","\nimport {v1} from \"uuid\";\nimport {TaskType} from \"../Todolist\";\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\nimport {TasksStateType} from \"../AppWithRedux\";\n\n\n\n\n\n\n\nexport type RemoveTaskActionType ={\n    type: 'REMOVE-TASK'\n    taskId: string\n    todolistId: string\n\n}\nexport type AddTaskActionType ={\n    title: string\n    todolistID: string\n    type: 'ADD-TASK'\n\n}\n\nexport type changeTaskStatusActionType ={\n    taskID: string\n    isDone: boolean\n    todolistID: string\n    type: 'CHANGE-TASK-STATUS'\n\n}\nexport type changeTaskTitleStatusACActionType ={\n    taskID: string\n    title: string\n    todolistID: string\n    type: 'CHANGE-TASK-TITLE'\n\n}\n\n\ntype ActionsType= AddTaskActionType\n    | RemoveTaskActionType\n    | changeTaskStatusActionType\n    | changeTaskTitleStatusACActionType\n|RemoveTodolistActionType\n|AddTodolistActionType\n\nlet initialState:TasksStateType ={}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case \"REMOVE-TASK\": {\n            let copyState = {...state}\n            copyState[action.todolistId] = copyState[action.todolistId].filter(t => t.id !== action.taskId)\n\n            return copyState\n        }\n        case \"ADD-TASK\":\n            let copyState = {...state}\n            const newTask: TaskType = {\n                id: v1(),\n                title: action.title,\n                isDone: false\n            }\n            copyState[action.todolistID]=[newTask, ...copyState[action.todolistID]]\n\n            return copyState\n        case \"CHANGE-TASK-STATUS\": {\n\n\n            /*let copyState = {...state}\n            let tasks = copyState[action.todolistID]\n            const task = tasks.find(task => task.id === action.taskID)\n            if (task) {\n                task.isDone = action.isDone\n            }*/\n            let tasks = state[action.todolistID]\n            state[action.todolistID]=tasks\n                .map(t=>t.id === action.taskID?\n                    {...t, isDone: action.isDone}: t)\n\n            return ({...state})\n        }\n        case \"CHANGE-TASK-TITLE\":{\n            /*return {...state, [action.todolistID]: state[action.todolistID].map(task=>{\n                if(task.id !== action.taskID) return task\n                    else return {...task, title: action.title}\n                })}*/\n            let tasks=state[action.todolistID]\n            state[action.todolistID]=tasks\n                .map(t=>t.id === action.taskID?\n                {...t, title: action.title}: t)\n            return ({...state})\n        }\n        case \"REMOVE-TODOLIST\": {\n            let copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        }\n        case \"ADD-TODOLIST\":{\n            return {...state, [action.todolistId]:[]}\n\n        }\n\n        default:\n           return state\n    }\n}\nexport const RemoveTaskAC=(taskId: string ,todolistId: string):RemoveTaskActionType=>{\n return    { type: 'REMOVE-TASK', taskId: taskId, todolistId}}\n\nexport const addTaskAC=(title: string, todolistID: string):AddTaskActionType=>({\n    type: \"ADD-TASK\", title, todolistID})\n\nexport const changeTaskStatusAC=(taskID: string, isDone: boolean, todolistID: string):changeTaskStatusActionType=>({\n    type: \"CHANGE-TASK-STATUS\", taskID, isDone, todolistID})\n\nexport const changeTaskTitleStatusAC=(taskID: string, title: string, todolistID: string):changeTaskTitleStatusACActionType=>({\n    type: \"CHANGE-TASK-TITLE\", taskID, title, todolistID})\n\n\n\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\n\r\nimport AddItemForm from \"./AddImportForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    AddTodolistAS,\r\n    ChangeTodolistFilterAS,\r\n    ChangeTodolistTitleAS,\r\n    RemoveTodolistAS,\r\n} from \"./state/todolists-reducer\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleStatusAC,\r\n    RemoveTaskAC,\r\n} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\n\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type toDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    let todolists=useSelector<AppRootStateType, toDoListType[]>(state=> state.todolists)\r\n    let tasks=useSelector<AppRootStateType, TasksStateType>(state=> state.tasks)\r\n    let dispatch= useDispatch()\r\n\r\n\r\n\r\n    const removeTask=useCallback((taskID: string, todolistID: string)=> {\r\n        const action = RemoveTaskAC(taskID, todolistID)\r\n        dispatch(action)},[dispatch])\r\n\r\n\r\n    const addTask=useCallback((title: string, todolistID: string) =>{\r\n        const action=addTaskAC(title, todolistID)\r\n        dispatch(action)},[dispatch])\r\n\r\n\r\n    const changeTaskstatus=useCallback((taskID: string, isDone: boolean, todolistID: string)=> {\r\n        dispatch(changeTaskStatusAC(taskID, isDone, todolistID))},[dispatch])\r\n\r\n\r\n    const changeTaskTitle=useCallback((taskID: string, title: string, todolistID: string)=> {\r\n        dispatch(changeTaskTitleStatusAC(taskID, title,todolistID))},[dispatch])\r\n\r\n\r\n    const changeFilter=useCallback((newFilterValue: FilterValuesType, todolistID: string)=> {\r\n        dispatch(ChangeTodolistFilterAS(newFilterValue, todolistID))},[dispatch])\r\n\r\n\r\n    const removeTodolist=useCallback((todolistID: string)=> {\r\n        dispatch(RemoveTodolistAS(todolistID))},[dispatch])\r\n\r\n\r\n    const AddTodolist=useCallback((title: string)=> {\r\n        const action= AddTodolistAS(title)\r\n        dispatch(action)},[dispatch])\r\n\r\n\r\n    const changeTodolistTitle=useCallback((title: string, todolistID: string)=> {\r\n        dispatch(ChangeTodolistTitleAS(title, todolistID))},[dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed={true}>\r\n                <Grid container style={{padding: \"40px 0\"}}>\r\n\r\n                    <AddItemForm addItem={AddTodolist}/>\r\n\r\n                </Grid>\r\n                <Grid container spacing={4} >\r\n                {\r\n                    todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id]\r\n\r\n\r\n\r\n\r\n                            return (<Grid item>\r\n                                    <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        _changeTodolistTitle={changeTodolistTitle}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        _removeTodolist={removeTodolist}\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        _addTask={addTask}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        filter={tl.filter}\r\n                                        changeTaskstatus={changeTaskstatus}/>\r\n                                    </Paper>\r\n                                </Grid>\r\n\r\n                            )\r\n                        })\r\n\r\n                }\r\n                    </Grid>\r\n                    </Container>\r\n                    </div>\r\n                    );\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n                    export default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\nimport {TodolistsReducer} from './todolists-reducer';\nimport {combineReducers, createStore} from 'redux';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: TodolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <AppWithRedux/>\r\n</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}