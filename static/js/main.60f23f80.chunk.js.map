{"version":3,"sources":["serviceWorker.ts","AddImportForm.tsx","EdiTableSpan.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","label","helperText","variant","value","onChange","e","currentTarget","onKeyPress","key","className","IconButton","onClick","AddBox","Button","color","size","EdiTableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","Todolist","task","tasks","map","isDone","id","Checkbox","changeTaskstatus","checked","newValue","changeTaskTitle","removeTask","Delete","changeTodolistTitle","removeTodolist","addTask","filter","changeFilter","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","taskID","todolistID","action","type","taskId","todolistId","addTaskAC","changeTaskStatusAC","changeTaskTitleStatusAC","newFilterValue","ChangeTodolistTitleAS","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","v1","AddTodolistAS","spacing","tl","tasksForTodolist","item","Paper","rootReducer","combineReducers","copyState","t","newTask","find","NewTodolist","todolist","todolist1","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.60f23f80.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox, Delete, TextFields} from \"@material-ui/icons\";\n\ntype AddItemFormType={\n    addItem: (title:string)=> void\n}\nfunction AddItemForm(props: AddItemFormType){\n    const [title, setTitle] = useState<string>(\" \")\n    const [error, setError] = useState<string | null>(null)\n\n    const OnKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") addItem()\n    }\n    const OnTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(null)\n        setTitle(e.currentTarget.value)\n    }\n    const addItem = () => {\n        debugger\n        const trimmedTitle = title.trim()\n        if (trimmedTitle !== \"\") {\n            props.addItem(trimmedTitle)\n\n        } else {\n            setError('Title is required!')\n        }\n        setTitle(\"\")\n    }\nreturn (\n    <div>\n\n\n<TextField\n    label={\"Title\"}\n    helperText={error}\n    error={!!error}\n    variant={\"outlined\"}\n    value={title}\n    onChange={OnTitleChangeHandler}\n    onKeyPress={OnKeyPressAddItem}\n    className={error ? \"error\" : \"\"}/>\n\n\n<IconButton onClick={addItem}>\n    <AddBox/>\n</IconButton>\n        <Button onClick={addItem} variant=\"contained\" color=\"inherit\" size=\"small\">x</Button>\n    {/* //   {error && <div className={\"error-message\"}>{error}</div>}*/}\n    </div>)\n}\nexport default AddItemForm","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EdiTableSpanType={\n    title: string\n    changeValue: (newValue: string)=> void\n}\nfunction EdiTableSpan(props: EdiTableSpanType){\n    const [editMode, setEditMode]=useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const activatedEditMode = ()=>{setEditMode(true)}\n    const deActivatedEditMode = ()=>{setEditMode(false); props.changeValue(title)}\n    const onChangeTitle= (e: ChangeEvent<HTMLInputElement>)=>{setTitle(e.currentTarget.value)}\n\n    return (\n        editMode\n/*\n            ? <input onBlur={deActivatedEditMode} autoFocus={true} value={title} onChange={onChangeTitle}/>\n*/\n            ?<TextField onBlur={deActivatedEditMode} autoFocus={true} value={title} onChange={onChangeTitle} variant={\"outlined\"}/>\n            : <span onDoubleClick={activatedEditMode}>{props.title}</span>\n\n    )\n}\n\n\nexport default EdiTableSpan","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from \"./AppWithReducers\";\r\nimport AddItemForm from \"./AddImportForm\";\r\nimport EdiTableSpan from \"./EdiTableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Check, CheckBox, Delete} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    removeTask: (askID: string, todolistID: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, todolistID: string) => void\r\n    changeTaskstatus: (taskID: string, isDone: boolean, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n    changeTodolistTitle: (title: string, todolistID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const task = props.tasks.map((task) => {\r\n        const RemoveTask = () => {\r\n            props.removeTask(task.id, props.id)\r\n        }\r\n        const cangeTaskstatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskstatus(task.id, e.currentTarget.checked, props.id)\r\n        }\r\n        const changeTaskStatus = (newValue: string) => {\r\n            props.changeTaskTitle(task.id, newValue, props.id)\r\n        }\r\n\r\n\r\n        return <div className={task.isDone ? \"is-done\" : \"\"}\r\n                   key={task.id}>\r\n            <Checkbox\r\n                color={\"secondary\"}\r\n                onChange={cangeTaskstatus}\r\n\r\n                checked={task.isDone}\r\n            />\r\n\r\n\r\n            {/*  <input\r\n                   onChange={cangeTaskstatus}\r\n                   type=\"checkbox\"\r\n                   checked={task.isDone}/>*/}\r\n\r\n\r\n            <EdiTableSpan title={task.title} changeValue={changeTaskStatus}/>\r\n            <IconButton onClick={RemoveTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    })\r\n\r\n\r\n    const OnAllClickHander = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n    const OnActiveClickHander = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n    const OnComplatedClickHander = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }\r\n\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    return <div>\r\n\r\n\r\n        <h3>\r\n            <EdiTableSpan title={props.title} changeValue={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n\r\n\r\n        <AddItemForm addItem={addTask}/>\r\n\r\n        <div>\r\n            {task}\r\n        </div>\r\n        <div>\r\n\r\n            <Button\r\n                color=\"primary\"\r\n                variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                size=\"small\"\r\n\r\n                onClick={OnAllClickHander}>all\r\n            </Button>\r\n            <Button\r\n                color=\"primary\"\r\n                variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                size=\"small\"\r\n\r\n                // className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                onClick={OnActiveClickHander}>Active\r\n            </Button>\r\n            <Button\r\n                color=\"primary\"\r\n                variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                size=\"small\"\r\n\r\n                //className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                onClick={OnComplatedClickHander}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React from \"react\";\nimport {StateType} from \"./user-reducer\";\nimport {FilterValuesType, TasksStateType, toDoListType} from \"../AppWithReducers\";\nimport {v1} from \"uuid\";\nimport {Simulate} from \"react-dom/test-utils\";\n\n\n\n\n\n\nexport type RemoveTodolistActionType ={\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\nexport type AddTodolistActionType ={\n    type: 'ADD-TODOLIST'\n    title: string\n    todolistId: string\n}\nexport type ChangeTodolistTitleActionType ={\n    type: 'CHANGE-TODOLIST-TITLE'\n    title: string\n    id: string\n}\nexport type ChangeTodolistFilterActionType ={\n    type: 'CHANGE-TODOLIST-FILTER'\n    filter: FilterValuesType\n    id: string\n}\n\ntype ActionsType = ChangeTodolistFilterActionType | ChangeTodolistTitleActionType | AddTodolistActionType |RemoveTodolistActionType\n\n\nlet initialState:toDoListType[] =[]\nexport const TodolistsReducer = (state: Array<toDoListType> = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter(tl => tl.id !== action.id)\n\n        case \"ADD-TODOLIST\":\n            const NewTodolist: toDoListType = {\n                title: action.title,\n                id: action.todolistId,\n                filter: \"all\"\n            }\n            return [...state, NewTodolist]\n\n        case 'CHANGE-TODOLIST-TITLE':\n            const todolist = state.find(t => t.id === action.id)\n            if (todolist) {\n                todolist.title = action.title\n               return [...state]\n            }\n            return state\n\n        case 'CHANGE-TODOLIST-FILTER':\n            const todolist1 = state.find(t => t.id === action.id)\n            if (todolist1) {\n                todolist1.filter = action.filter\n                return [...state]\n            }\n            return state\n\n        default:\n            return state\n\n    }\n}\nexport const RemoveTodolistAS=(todolistId: string):RemoveTodolistActionType=>({type: \"REMOVE-TODOLIST\", id: todolistId})\nexport const AddTodolistAS=(title: string):AddTodolistActionType=>({type: \"ADD-TODOLIST\", title: title, todolistId: v1()})\nexport const ChangeTodolistTitleAS=(title: string, id: string):ChangeTodolistTitleActionType=>({ type: \"CHANGE-TODOLIST-TITLE\", title: title, id:id})\nexport const ChangeTodolistFilterAS = (filter:FilterValuesType, id:string):ChangeTodolistFilterActionType=>({ type: \"CHANGE-TODOLIST-FILTER\", filter: filter, id: id})","import React from \"react\";\n\nimport {TasksStateType, toDoListType} from \"../AppWithReducers\";\nimport {v1} from \"uuid\";\nimport {TaskType} from \"../Todolist\";\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\n\n\n\n\n\n\n\nexport type RemoveTaskActionType ={\n    type: 'REMOVE-TASK'\n    taskId: string\n    todolistId: string\n\n}\nexport type AddTaskActionType ={\n    title: string\n    todolistID: string\n    type: 'ADD-TASK'\n\n}\n\nexport type changeTaskStatusActionType ={\n    taskID: string\n    isDone: boolean\n    todolistID: string\n    type: 'CHANGE-TASK-STATUS'\n\n}\nexport type changeTaskTitleStatusACActionType ={\n    taskID: string\n    title: string\n    todolistID: string\n    type: 'CHANGE-TASK-TITLE'\n\n}\n\n\ntype ActionsType= AddTaskActionType\n    | RemoveTaskActionType\n    | changeTaskStatusActionType\n    | changeTaskTitleStatusACActionType\n|RemoveTodolistActionType\n|AddTodolistActionType\n\nlet initialState:TasksStateType ={}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case \"REMOVE-TASK\": {\n            let copyState = {...state}\n            copyState[action.todolistId] = copyState[action.todolistId].filter(t => t.id !== action.taskId)\n\n            return copyState\n        }\n        case \"ADD-TASK\":\n            let copyState = {...state}\n            const newTask: TaskType = {\n                id: v1(),\n                title: action.title,\n                isDone: false\n            }\n            copyState[action.todolistID]=[newTask, ...copyState[action.todolistID]]\n\n            return copyState\n        case \"CHANGE-TASK-STATUS\": {\n\n\n            let copyState = {...state}\n            let tasks = copyState[action.todolistID]\n            const task = tasks.find(task => task.id === action.taskID)\n            if (task) {\n                task.isDone = action.isDone\n            }\n            return copyState\n        }\n        case \"CHANGE-TASK-TITLE\":{\n           /* let copyState = {...state}\n            let tasks = copyState[action.todolistID]\n            const task = tasks.find(task => task.id === action.taskID)\n            if (task) {\n                task.title = action.title\n            }\n            return copyState*/\n            return {...state, [action.todolistID]: state[action.todolistID].map(task=>{\n                if(task.id !== action.taskID) return task\n                    else return {...task, title: action.title}\n                })}\n        }\n        case \"REMOVE-TODOLIST\": {\n            let copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        }\n        case \"ADD-TODOLIST\":{\n            return {...state, [action.todolistId]:[]}\n\n        }\n\n        default:\n           return state\n    }\n}\nexport const RemoveTaskAC=(taskId: string ,todolistId: string):RemoveTaskActionType=>{\n return    { type: 'REMOVE-TASK', taskId: taskId, todolistId}}\n\nexport const addTaskAC=(title: string, todolistID: string):AddTaskActionType=>({\n    type: \"ADD-TASK\", title, todolistID})\n\nexport const changeTaskStatusAC=(taskID: string, isDone: boolean, todolistID: string):changeTaskStatusActionType=>({\n    type: \"CHANGE-TASK-STATUS\", taskID, isDone, todolistID})\n\nexport const changeTaskTitleStatusAC=(taskID: string, title: string, todolistID: string):changeTaskTitleStatusACActionType=>({\n    type: \"CHANGE-TASK-TITLE\", taskID, title, todolistID})\n\n\n\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddImportForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    AddTodolistAS,\r\n    ChangeTodolistFilterAS,\r\n    ChangeTodolistTitleAS,\r\n    RemoveTodolistAS,\r\n    TodolistsReducer\r\n} from \"./state/todolists-reducer\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleStatusAC,\r\n    RemoveTaskAC,\r\n    tasksReducer\r\n} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type toDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n\r\n    let todolists=useSelector<AppRootStateType, toDoListType[]>(state=> state.todolists)\r\n    let tasks=useSelector<AppRootStateType, TasksStateType>(state=> state.tasks)\r\n    let dispatch= useDispatch()\r\n\r\n\r\n\r\n    function removeTask(taskID: string, todolistID: string) {\r\n        const action = RemoveTaskAC(taskID, todolistID)\r\n        dispatch(action)\r\n\r\n    }\r\n    function addTask(title: string, todolistID: string) {\r\n        const action=addTaskAC(title, todolistID)\r\n        dispatch(action)\r\n    }\r\n    function changeTaskstatus(taskID: string, isDone: boolean, todolistID: string) {\r\n        dispatch(changeTaskStatusAC(taskID, isDone, todolistID))\r\n\r\n    }\r\n    function changeTaskTitle(taskID: string, title: string, todolistID: string) {\r\n        dispatch(changeTaskTitleStatusAC(taskID, title,todolistID))\r\n    }\r\n\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType, todolistID: string) {\r\n        dispatch(ChangeTodolistFilterAS(newFilterValue, todolistID))\r\n\r\n    }\r\n\r\n\r\n    function removeTodolist(todolistID: string) {\r\n        dispatch(RemoveTodolistAS(todolistID))\r\n\r\n\r\n    }\r\n\r\n\r\n    function AddTodolist(title: string) {\r\n        const action= AddTodolistAS(title)\r\n        dispatch(action)\r\n\r\n    }\r\n\r\n\r\n\r\n    function changeTodolistTitle(title: string, todolistID: string) {\r\n        dispatch(ChangeTodolistTitleAS(title, todolistID))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed={true}>\r\n                <Grid container style={{padding: \"40px 0\"}}>\r\n                    <AddItemForm addItem={AddTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={4} >\r\n                {\r\n                    todolists.map(tl => {\r\n                            let tasksForTodolist = tasks[tl.id]\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = tasks[tl.id].filter(task => task.isDone === false)\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = tasks[tl.id].filter(task => task.isDone === true)\r\n                            }\r\n                            return (<Grid item>\r\n                                    <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        removeTodolist={removeTodolist}\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        addTask={addTask}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        filter={tl.filter}\r\n                                        changeTaskstatus={changeTaskstatus}/>\r\n                                    </Paper>\r\n                                </Grid>\r\n\r\n                            )\r\n                        })\r\n\r\n                }\r\n                    </Grid>\r\n                    </Container>\r\n                    </div>\r\n                    );\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n                    export default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\nimport {TodolistsReducer} from './todolists-reducer';\nimport {combineReducers, createStore} from 'redux';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: TodolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './AppWithReducers';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducers from \"./AppWithReducers\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <AppWithRedux/>\r\n</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}