{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","task","tasks","map","className","isDone","key","id","onChange","e","changeTaskstatus","currentTarget","checked","type","onClick","removeTask","addTask","trimitedTitle","trim","removeTodolist","value","onKeyPress","filter","changeFilter","App","todolistsID1","v1","todolistsID2","todolists","setTodolists","setTasks","taskID","todolistID","todolistTasks","newTask","newFilterValue","todolist","find","t","filteredTodolists","tl","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.38789d0e.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    removeTask: (askID: string, todolistID: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, todolistID: string) => void\r\n    changeTaskstatus: (taskID: string, isDone: boolean, todolistID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const task = props.tasks.map((task) => {\r\n\r\n\r\n        const RemoveTask = () => {\r\n            props.removeTask(task.id, props.id)\r\n        }\r\n        const cangeTaskstatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskstatus(task.id, e.currentTarget.checked, props.id)\r\n        }\r\n\r\n        return <li className={task.isDone ? \"is-done\" : \"\"}\r\n            key={task.id}><input\r\n            onChange={cangeTaskstatus}\r\n            type=\"checkbox\"\r\n            checked={task.isDone}/> <span>{task.title}</span>\r\n\r\n\r\n            {/* // при нажатии передается айди в функцию фильтр //*/}\r\n            <button onClick={RemoveTask}>x\r\n            </button>\r\n\r\n        </li>\r\n\r\n\r\n    })\r\n\r\n    const addTask = () => {\r\n        const trimitedTitle = title.trim() // что бьы не вводиласть пустая строка\r\n        if (trimitedTitle !== \"\") {\r\n            props.addTask(trimitedTitle, props.id)\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n\r\n    const OnKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") addTask()\r\n    }\r\n    const OnTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const OnAllClickHander = () => {\r\n        props.changeFilter(\"all\",props.id)\r\n    }\r\n    const OnActiveClickHander = () => {\r\n        props.changeFilter(\"active\",props.id)\r\n    }\r\n    const OnComplatedClickHander = () => {\r\n        props.changeFilter(\"completed\",props.id)\r\n    }\r\n\r\n    return <div>\r\n\r\n\r\n        <h3>{props.title} <button onClick={()=>{props.removeTodolist(props.id)}} >x</button></h3>\r\n        <div>\r\n            <input value={title}\r\n                   onChange={OnTitleChangeHandler}\r\n                   onKeyPress={OnKeyPressAddTask}\r\n                   className={error ? \"error\" : \"\"}/>\r\n\r\n\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className={\"error-message\"}>{error}</div>}\r\n        </div>\r\n        {/* // создается новый список (шаблон) на основе данных в массиве. которые мы создали и прокинули пропсам\r\n        в компоненту тодолист в апп//*/}\r\n        <ul>\r\n            {task}\r\n        </ul>\r\n        <div>\r\n            {/* // передает значиние олл, актив, компл, в функцию changeFilter*/}\r\n            <button\r\n                className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                onClick={OnAllClickHander}>all\r\n            </button>\r\n            <button\r\n                className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                onClick={OnActiveClickHander}>Active\r\n            </button>\r\n            <button\r\n                className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n\r\n                onClick={OnComplatedClickHander}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype toDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todolistsID1 = v1()\r\n    const todolistsID2 = v1()\r\n\r\n    const [todolists, setTodolists] = useState<Array<toDoListType>>([\r\n        {id: todolistsID1, title: \"wont to bye\", filter: \"all\"},\r\n        {id: todolistsID2, title: \"wont to milk\", filter: \"all\"},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todolistsID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n        ],\r\n        [todolistsID2]: [\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n            {id: v1(), title: \"Bread\", isDone: true},\r\n            {id: v1(), title: \"eggs\", isDone: false},\r\n            {id: v1(), title: \"popi\", isDone: false},\r\n        ]\r\n\r\n    })\r\n\r\n\r\n    /*\r\n        // принимает отфильтрованные таски setTasks из функции removeTask\r\n    // tasks - исходный массив = который проресовывется сразуже на странице.\r\n    // setTasks = функция фильтр(котоая меняет данные)\r\n    // useState принимет стартовое значение и запоминает, что его нужно перересовать. принимает данные из\r\n        const [tasks, setTasks] = useState<Array<TaskType>>([\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"ReactJS\", isDone: false}\r\n        ])\r\n\r\n    // отфильтрованные значения юстает. и со старта мы говорим олл(показать все значения)\r\n        const [filter, setFilter] = useState<FilterValuesType>(\"all\")\r\n\r\n        */\r\n\r\n// при нажатии на кнопку онклик, кнопка выдает айди таска на котрый было нажатие. в функцию фильтр приходит ойди с номером нажатой клавиши.//\r\n    // если айди в таке(массив) будет равен айди из онклик , функция фильтр проресует новую таку, но без удаленного элемента//\r\n// пропусти те таки ойди которой равны тру а которые не равны нужно удалть\r\n    // отфильтрованные таски отправляет в функцтю setTasks\r\n\r\n    function removeTask(taskID: string, todolistID: string) {\r\n        const todolistTasks = tasks[todolistID]\r\n        tasks[todolistID] = todolistTasks.filter(task => task.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n// добавление таски  newTask, ...tasks] копирует в начало списка новую таску\r\n    // закидываем в тудулист пропсами\r\n    function addTask(title: string, todolistID: string) {\r\n        const newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        const todolistTasks = tasks[todolistID]\r\n        tasks[todolistID] = [newTask, ...todolistTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n\r\n//1 1. принимает значение типа = FilterValuesType\r\n//2. внутри функции создаем     setFilter в котрок передаем значение newFilterValue\r\n    function changeFilter(newFilterValue: FilterValuesType, todolistID: string) {\r\n        const todolist = todolists.find(t => t.id === todolistID)\r\n        if (todolist) {\r\n            todolist.filter = newFilterValue\r\n            setTodolists([...todolists])\r\n        }\r\n\r\n    }\r\n\r\n    function changeTaskstatus(taskID: string, isDone: boolean, todolistID: string) {\r\n        const todolistTasks = tasks[todolistID]\r\n        const task = todolistTasks.find(task => task.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function removeTodolist(todolistID: string) {\r\n        const filteredTodolists = todolists.filter(tl => tl.id !== todolistID)\r\n        setTodolists(filteredTodolists)\r\n        delete tasks[todolistID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    // 1. присваеваем   tasksForTodolist значение таск целиком.\r\n    // 2  если у таски значение isDone = фалсе , то таска попадет в результирующий массив\r\n    // 3   если у таски значение isDone = тру , то таска попадет в результирующий массив\r\n    // tasksForTodolist прокидываем в tasks что бы туду лист получио не все данные, а только те, которые отфильторванны\r\n/*\r\n    let tasksForTodolist = tasks\r\n    if (filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(task => task.isDone === false)\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(task => task.isDone === true)\r\n    }\r\n*/\r\n\r\n\r\n// changeFilter передадим в тодолист для дальнейшей сортировки по кнопке\r\n    /*    removeTask поступает в пропсы который позволяет перересоваться тодолисту*/\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todolists.map(tl => {\r\n                    let tasksForTodolist = tasks[tl.id]\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = tasks[tl.id].filter(task => task.isDone === false)\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = tasks[tl.id].filter(task => task.isDone === true)\r\n                    }\r\n                 return (\r\n                    <Todolist\r\n                        removeTodolist={removeTodolist}\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        filter={tl.filter}\r\n                        changeTaskstatus={changeTaskstatus}/>\r\n\r\n                 ) })\r\n\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}