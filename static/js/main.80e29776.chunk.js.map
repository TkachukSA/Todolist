{"version":3,"sources":["AddImportForm.tsx","EdiTableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimitedTitle","trim","TextField","label","helperText","variant","onChange","e","currentTarget","value","onKeyPress","key","className","IconButton","onClick","AddBox","Button","color","size","EdiTableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","Todolist","task","tasks","map","isDone","id","Checkbox","changeTaskstatus","checked","newValue","changeTaskTitle","removeTask","Delete","changeTodolistTitle","removeTodolist","addTask","filter","changeFilter","App","todolistsID1","v1","todolistsID2","todolists","setTodolists","setTasks","taskID","todolistID","todolistTasks","newTask","newFilterValue","todolist","find","t","filteredTodolists","tl","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","NewTodolistId","NewTodolist","spacing","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.80e29776.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox, Delete, TextFields} from \"@material-ui/icons\";\n\ntype AddItemFormType={\n    addItem: (title:string)=> void\n}\nfunction AddItemForm(props: AddItemFormType){\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const OnKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") addItem()\n    }\n    const OnTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(null)\n        setTitle(e.currentTarget.value)\n    }\n    const addItem = () => {\n        const trimitedTitle = title.trim() // что бьы не вводиласть пустая строка\n        if (trimitedTitle !== \"\") {\n            props.addItem(trimitedTitle)\n        } else {\n            setError(\"Title is required\")\n        }\n        setTitle(\"\")\n    }\nreturn (\n    <div>\n        {/*<input value={title}\n               onChange={OnTitleChangeHandler}\n               onKeyPress={OnKeyPressAddItem}\n               className={error ? \"error\" : \"\"}/>*/}\n\n<TextField\n    error={!!error}\n    label={\"Title\"}\n    helperText={error}\n    variant={\"outlined\"}\n    onChange={OnTitleChangeHandler}\n    onKeyPress={OnKeyPressAddItem}\n    className={error ? \"error\" : \"\"}/>\n\n\n<IconButton onClick={addItem}>\n    <AddBox/>\n</IconButton>\n        <Button onClick={addItem} variant=\"contained\" color=\"inherit\" size=\"small\">x</Button>\n    {/* //   {error && <div className={\"error-message\"}>{error}</div>}*/}\n    </div>)\n}\nexport default AddItemForm","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EdiTableSpanType={\n    title: string\n    changeValue: (newValue: string)=> void\n}\nfunction EdiTableSpan(props: EdiTableSpanType){\n    const [editMode, setEditMode]=useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const activatedEditMode = ()=>{setEditMode(true)}\n    const deActivatedEditMode = ()=>{setEditMode(false); props.changeValue(title)}\n    const onChangeTitle= (e: ChangeEvent<HTMLInputElement>)=>{setTitle(e.currentTarget.value)}\n\n    return (\n        editMode\n/*\n            ? <input onBlur={deActivatedEditMode} autoFocus={true} value={title} onChange={onChangeTitle}/>\n*/\n            ?<TextField onBlur={deActivatedEditMode} autoFocus={true} value={title} onChange={onChangeTitle} variant={\"outlined\"}/>\n            : <span onDoubleClick={activatedEditMode}>{props.title}</span>\n\n    )\n}\n\n\nexport default EdiTableSpan","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\nimport AddItemForm from \"./AddImportForm\";\r\nimport EdiTableSpan from \"./EdiTableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Check, CheckBox, Delete} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    removeTask: (askID: string, todolistID: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, todolistID: string) => void\r\n    changeTaskstatus: (taskID: string, isDone: boolean, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n    changeTodolistTitle: (title: string, todolistID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const task = props.tasks.map((task) => {\r\n        const RemoveTask = () => {\r\n            props.removeTask(task.id, props.id)\r\n        }\r\n        const cangeTaskstatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskstatus(task.id, e.currentTarget.checked, props.id)\r\n        }\r\n        const changeTaskStatus = (newValue: string) => {\r\n            props.changeTaskTitle(task.id, newValue, props.id)\r\n        }\r\n\r\n\r\n        return <div className={task.isDone ? \"is-done\" : \"\"}\r\n                   key={task.id}>\r\n            <Checkbox\r\n                color={\"secondary\"}\r\n                onChange={cangeTaskstatus}\r\n\r\n                checked={task.isDone}\r\n            />\r\n\r\n\r\n            {/*  <input\r\n                   onChange={cangeTaskstatus}\r\n                   type=\"checkbox\"\r\n                   checked={task.isDone}/>*/}\r\n\r\n\r\n            <EdiTableSpan title={task.title} changeValue={changeTaskStatus}/>\r\n            <IconButton onClick={RemoveTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    })\r\n\r\n\r\n    const OnAllClickHander = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n    const OnActiveClickHander = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n    const OnComplatedClickHander = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }\r\n\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    return <div>\r\n\r\n\r\n        <h3>\r\n            <EdiTableSpan title={props.title} changeValue={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n\r\n\r\n        <AddItemForm addItem={addTask}/>\r\n\r\n        <div>\r\n            {task}\r\n        </div>\r\n        <div>\r\n\r\n            <Button\r\n                color=\"primary\"\r\n                variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                size=\"small\"\r\n\r\n                onClick={OnAllClickHander}>all\r\n            </Button>\r\n            <Button\r\n                color=\"primary\"\r\n                variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                size=\"small\"\r\n\r\n                // className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                onClick={OnActiveClickHander}>Active\r\n            </Button>\r\n            <Button\r\n                color=\"primary\"\r\n                variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                size=\"small\"\r\n\r\n                //className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                onClick={OnComplatedClickHander}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddImportForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type toDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todolistsID1 = v1()\r\n    const todolistsID2 = v1()\r\n\r\n    const [todolists, setTodolists] = useState<Array<toDoListType>>([\r\n        {id: todolistsID1, title: \"wont to bye\", filter: \"all\"},\r\n        {id: todolistsID2, title: \"wont to milk\", filter: \"all\"},\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistsID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n        ],\r\n        [todolistsID2]: [\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n            {id: v1(), title: \"Bread\", isDone: true},\r\n            {id: v1(), title: \"eggs\", isDone: false},\r\n            {id: v1(), title: \"popi\", isDone: false},\r\n        ]})\r\n\r\n    function removeTask(taskID: string, todolistID: string) {\r\n        const todolistTasks = tasks[todolistID]\r\n        tasks[todolistID] = todolistTasks.filter(task => task.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todolistID: string) {\r\n        const newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        const todolistTasks = tasks[todolistID]\r\n        tasks[todolistID] = [newTask, ...todolistTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType, todolistID: string) {\r\n        const todolist = todolists.find(t => t.id === todolistID)\r\n        if (todolist) {\r\n            todolist.filter = newFilterValue\r\n            setTodolists([...todolists])\r\n        }\r\n\r\n    }\r\n\r\n    function changeTaskstatus(taskID: string, isDone: boolean, todolistID: string) {\r\n        const todolistTasks = tasks[todolistID]\r\n        const task = todolistTasks.find(task => task.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function removeTodolist(todolistID: string) {\r\n        const filteredTodolists = todolists.filter(tl => tl.id !== todolistID)\r\n        setTodolists(filteredTodolists)\r\n        delete tasks[todolistID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n\r\n    function AddTodolist(title: string) {\r\n        const NewTodolistId = v1()\r\n        const NewTodolist: toDoListType = {\r\n            title: title,\r\n            id: NewTodolistId,\r\n            filter: \"all\"\r\n        }\r\n        setTodolists([...todolists, NewTodolist])\r\n        setTasks({...tasks, [NewTodolistId]: []})\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, title: string, todolistID: string) {\r\n        const todolistTasks = tasks[todolistID]\r\n        const task = todolistTasks.find(task => task.id === taskID)\r\n        if (task) {\r\n            task.title = title\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTodolistTitle(title: string, todolistID: string) {\r\n        const todolist = todolists.find(t => t.id === todolistID)\r\n        if (todolist) {\r\n            todolist.title = title\r\n            setTodolists([...todolists])\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed={true}>\r\n                <Grid container style={{padding: \"40px 0\"}}>\r\n                    <AddItemForm addItem={AddTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={4} >\r\n                {\r\n                    todolists.map(tl => {\r\n                            let tasksForTodolist = tasks[tl.id]\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = tasks[tl.id].filter(task => task.isDone === false)\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = tasks[tl.id].filter(task => task.isDone === true)\r\n                            }\r\n                            return (<Grid item>\r\n                                    <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        removeTodolist={removeTodolist}\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        addTask={addTask}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        filter={tl.filter}\r\n                                        changeTaskstatus={changeTaskstatus}/>\r\n                                    </Paper>\r\n                                </Grid>\r\n\r\n                            )\r\n                        })\r\n\r\n                }\r\n                    </Grid>\r\n                    </Container>\r\n                    </div>\r\n                    );\r\n                    }\r\n\r\n                    export default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}